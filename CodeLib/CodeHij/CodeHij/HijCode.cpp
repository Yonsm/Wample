


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Header
#include "HijEngine.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variable in share data section
#pragma comment(linker, "/SECTION:CodeHij,SRW")
#pragma data_seg("CodeHij")
HijEngine g_CodeHij = {0};
#pragma data_seg()
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TODO: Your own share data
#pragma data_seg("CodeHij")
PFNVOID g_pCreateFileW = NULL;
PFNVOID g_pDeleteFileW = NULL;

HWND g_hNotify = NULL;
TCHAR g_tzNotify[1024] = {0};
#pragma data_seg()

#define UM_CodeHij WM_APP + 272

VOID _Notify(PCTSTR ptzFormat, ...)
{
	DWORD i;
	va_list va;
	va_start(va, ptzFormat);
	i = wvsprintf(g_tzNotify, ptzFormat, va);
	va_end(va);
	SendMessage(g_hNotify, UM_CodeHij, 0, (LPARAM) g_tzNotify);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hook routine
BOOL WINAPI MyCreateFileW(PCWSTR pFileName,
						  DWORD dwDesiredAccess,
						  DWORD dwShareMode,
						  PSECURITY_ATTRIBUTES pSecurityAttributes,
						  DWORD dwCreationDisposition,
						  DWORD dwFlagsAndAttributes,
						  HANDLE hTemplateFile)
{
	_Notify(TEXT("CreateFile: %s\r\n"), pFileName);

	return ((BOOL (*)(PCWSTR, DWORD, DWORD, PSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE)) g_pCreateFileW)
		(pFileName, dwDesiredAccess, dwShareMode, pSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
}

BOOL WINAPI MyDeleteFileW(PCWSTR pFileName)
{
	_Notify(TEXT("DeleteFile: %s\r\n"), pFileName);

	TCHAR tzStr[MAX_PATH];
	wsprintf(tzStr, TEXT("Do you really want to delete file:\n\n%s"), pFileName);
	if (MessageBox(GetActiveWindow(), tzStr, TEXT("CodeHij"), MB_ICONQUESTION | MB_YESNO) != IDYES)
	{
		return FALSE;
	}

	return ((BOOL (*)(PCWSTR)) g_pDeleteFileW)(pFileName);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Start hijack
extern "C" __declspec(dllexport)
BOOL WINAPI HijStart(HWND hNotify)
{
	g_hNotify = hNotify;

	DWORD dwTrust = CeGetCurrentTrust();
	if (dwTrust != OEM_CERTIFY_TRUST)
	{
		// Insufficient trust!!! Sign the EXE and DLL with privileged certificate, install the certificate on the device
		return FALSE;
	}

	BOOL bRet = FALSE;
	DWORD dwPermissions = 0;
	__try
	{
		// Switch to kernel mode to get access to kernel memory (needed only on CE 4.0). Get access to memory slots of other processes		
		SetKMode(TRUE);
		dwPermissions = SetProcPermissions(-1);

		// Start HijEngine
		bRet = g_CodeHij.Start();

		// TODO: Add custom API hook
		g_pCreateFileW = g_CodeHij.Hook(SH_FILESYS_APIS, _CreateFileW, (PFNVOID) MyCreateFileW);
		g_pDeleteFileW = g_CodeHij.Hook(SH_FILESYS_APIS, _DeleteFileW, (PFNVOID) MyDeleteFileW);
	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{

	}

	if (dwPermissions)
	{
		SetProcPermissions(dwPermissions);
	}
	SetKMode(FALSE);

	return bRet;

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stop hijack
extern "C" __declspec(dllexport)
BOOL WINAPI HijStop()
{
	BOOL bRet = FALSE;
	DWORD dwPermissions = 0;
	__try
	{
		SetKMode(TRUE);		
		dwPermissions = SetProcPermissions(-1);
		bRet = g_CodeHij.Stop();
	}
	__except (EXCEPTION_EXECUTE_HANDLER)
	{

	}

	if (dwPermissions)
	{
		SetProcPermissions(dwPermissions);
	}
	SetKMode(FALSE);

	return bRet;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Entry
BOOL APIENTRY DllMain(HANDLE hInstance, DWORD dwReason, PVOID pvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		g_CodeHij.Attach((HMODULE) hInstance);
	}
	else if (dwReason == DLL_PROCESS_ATTACH)
	{
		g_CodeHij.Detach();
	}
	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
